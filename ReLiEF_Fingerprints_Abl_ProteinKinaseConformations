##############################################
# This Jupyter notebook will produce a TMAP tree-based heatmap of the sixty conformations belonging to Abl protein kinase and probed by nuclear magnetic resonance
# as detailed in the following publication:
# Xie, T.; Saleh, T.; Rossi, P.; Kalodimos, C. G.; Conformational states dynamically populated by a kinase determine its function, Science  2020, 370 (6513).  DOI: 10.1126/science.abc2754
# 
# Copyright 2023 Benjamin M. Samudio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Ben Samudio, March 2023
# Towards Alleviating Suffering
###############################################

##### Iniitiation

import pandas as pd
from faerun import Faerun
from mhfp.encoder import MHFPEncoder
import random
import csv
import pandas as pd
import re
import math
import tmap
import plotly.express as px

# Create a list of all 60 Abl protein kinase conformations

label = ['A'] * 60

label[0] = '6xr6_0001'
label[1] = '6xr6_0002'
label[2] = '6xr6_0003'
label[3] = '6xr6_0004'
label[4] = '6xr6_0005'
label[5] = '6xr6_0006'
label[6] = '6xr6_0007'
label[7] = '6xr6_0008'
label[8] = '6xr6_0009'
label[9] = '6xr6_0010'
label[10] = '6xr6_0011'
label[11] = '6xr6_0012'
label[12] = '6xr6_0013'
label[13] = '6xr6_0014'
label[14] = '6xr6_0015'
label[15] = '6xr6_0016'
label[16] = '6xr6_0017'
label[17] = '6xr6_0018'
label[18] = '6xr6_0019'
label[19] = '6xr6_0020'
label[20] = '6xr7_0001'
label[21] = '6xr7_0002'
label[22] = '6xr7_0003'
label[23] = '6xr7_0004'
label[24] = '6xr7_0005'
label[25] = '6xr7_0006'
label[26] = '6xr7_0007'
label[27] = '6xr7_0008'
label[28] = '6xr7_0009'
label[29] = '6xr7_0010'
label[30] = '6xr7_0011'
label[31] = '6xr7_0012'
label[32] = '6xr7_0013'
label[33] = '6xr7_0014'
label[34] = '6xr7_0015'
label[35] = '6xr7_0016'
label[36] = '6xr7_0017'
label[37] = '6xr7_0018'
label[38] = '6xr7_0019'
label[39] = '6xr7_0020'
label[40] = '6xrg_0001'
label[41] = '6xrg_0002'
label[42] = '6xrg_0003'
label[43] = '6xrg_0004'
label[44] = '6xrg_0005'
label[45] = '6xrg_0006'
label[46] = '6xrg_0007'
label[47] = '6xrg_0008'
label[48] = '6xrg_0009'
label[49] = '6xrg_0010'
label[50] = '6xrg_0011'
label[51] = '6xrg_0012'
label[52] = '6xrg_0013'
label[53] = '6xrg_0014'
label[54] = '6xrg_0015'
label[55] = '6xrg_0016'
label[56] = '6xrg_0017'
label[57] = '6xrg_0018'
label[58] = '6xrg_0019'
label[59] = '6xrg_0020'
distance_array = []
abl_lists = []

bits = 10000

# Extract fingerprints from CSV file
filepath = 'ReLieF_Fingerprints.csv'
df = pd.read_csv(filepath)

# Split fingerprint bits into abl_list
for fingerprint_whole in df['Fingerprints']:
    fingerprint_split = []
    fingerprint_split = fingerprint_whole.split(" ") 
    abl_lists.append(fingerprint_split)
    
# Initialize Minhashing
enc = tmap.Minhash(bits)


# Initialize LSH Forest
lf_abl = tmap.LSHForest(bits)


# Add the fingerprints to the LSH Forest and index
lf_abl.batch_add(enc.batch_from_string_array(abl_lists))
lf_abl.index()

x, y, s, t, _ = tmap.layout_from_lsh_forest(lf_abl)

# Determine pairwise lsh forest layout-derived distances
for partner_A_index in range(0,len(s)+1):
    partner_A_x = x[partner_A_index]
    partner_A_y = y[partner_A_index]
    column_vector = []
    out_vector = ""
    for partner_B_index in range(0,len(s)+1):
        partner_B_x = x[partner_B_index]
        partner_B_y = y[partner_B_index]
        distance = math.sqrt((partner_A_x - partner_B_x)**2+(partner_A_y - partner_B_y)**2)
        column_vector.append(distance)
        out_vector = out_vector + str(distance) + " "
    distance_array.append(column_vector)

# Plot the heatmap using Plotly
fig = px.imshow(distance_array,width=1000, height=1000,x=label,y=label)
fig.show()
